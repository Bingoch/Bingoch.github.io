<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mango</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bingoch.github.io/"/>
  <updated>2019-11-04T08:48:04.835Z</updated>
  <id>https://bingoch.github.io/</id>
  
  <author>
    <name>Bingo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC</title>
    <link href="https://bingoch.github.io/2019/06/16/SpringMVC/"/>
    <id>https://bingoch.github.io/2019/06/16/SpringMVC/</id>
    <published>2019-06-16T12:13:05.419Z</published>
    <updated>2019-11-04T08:48:04.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-三层结构介绍"><a href="#1-三层结构介绍" class="headerlink" title="1. 三层结构介绍"></a>1. 三层结构介绍</h2><p>三层架构包括：<strong>表现层、业务层、持久层</strong>。</p><h3 id="1-1-表现层"><a href="#1-1-表现层" class="headerlink" title="1.1 表现层"></a>1.1 表现层</h3><ul><li><p>也就是我们常说的web 层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http 协议请求web 层，web 需要接收 http 请求，完成 http 响应。</p></li><li><p>表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。</p></li><li><p>表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。</p></li><li><p>表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</p></li></ul><h3 id="1-2-业务层"><a href="#1-2-业务层" class="headerlink" title="1.2 业务层"></a>1.2 业务层</h3><ul><li><p>也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业务层，但是业务层不依赖 web 层。</p></li><li><p>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的， 事务应该放到业务层来控制）</p></li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><ul><li>也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库中。通俗的讲，持久层就是和数据库交互，对数据库表进行增删改查的。</li></ul><h2 id="2-MVC-设计模式"><a href="#2-MVC-设计模式" class="headerlink" title="2. MVC 设计模式"></a>2. MVC 设计模式</h2><p><strong>MVC</strong> 全名是 Model View Controller，是<strong>模型(model)－视图(view)－控制器(controller)</strong>的缩写， 是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职：</p><ol><li>Model（模型）</li></ol><ul><li>模型包含业务模型和数据模型，数据模型用于封装数据，业务模型用于处理业务。</li></ul><ol start="2"><li>View（视图）</li></ol><ul><li><p>通常指的就是我们的 jsp 或者 html，作用一般就是展示数据的。</p></li><li><p>通常视图是依据模型数据创建的。</p></li></ul><ol start="3"><li>Controller（控制器）</li></ol><ul><li>是应用程序中处理用户交互的部分。作用一般就是处理程序逻辑的。</li></ul><h2 id="3-执行流程"><a href="#3-执行流程" class="headerlink" title="3. 执行流程"></a>3. 执行流程</h2><p><img src="C:\Users\CHEN\Documents\markdown\image\mvc.jpg" alt=""></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="web-xml-配置"><a href="#web-xml-配置" class="headerlink" title="web.xml 配置"></a>web.xml 配置</h2><p>配置前端控制器DispatcherServlet和拦截的URL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvcTest<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.在servlet-name命名</span></span><br><span class="line"><span class="comment">    2.servlet-class就是你对应的拦截器的包，这里默认这样写就好了</span></span><br><span class="line"><span class="comment">    3.load-on-startup=1  看名字就知道是指工程运行的的时候就启动该拦截器</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     4.servlet-mapping就是设置拦截器将要对哪些请求做出拦截，*.do表示对所有.do的结尾的请求会被拦截处理</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="spring-mvc-配置"><a href="#spring-mvc-配置" class="headerlink" title="spring-mvc 配置"></a>spring-mvc 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.springmvc.controller"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        annotation-driven HandlerMapping --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源处理， css， js， imgs --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 使用 bean 定义一个 Interceptor，直接定义在 mvc:interceptors 下面的 Interceptor 将拦截所有的请求 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springmvc.interceptor.WrongCodeInterceptor"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/demo/hello.do"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 定义在 mvc:interceptor 下面的 Interceptor，表示对特定的请求进行拦截 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springmvc.interceptor.LoginInterceptor"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Controller返回值及常用注解"><a href="#Controller返回值及常用注解" class="headerlink" title="Controller返回值及常用注解"></a>Controller返回值及常用注解</h1><p>Controller 方法的返回值分为不使用注解修饰和注解修饰两种。</p><h2 id="1-不使用注解修饰"><a href="#1-不使用注解修饰" class="headerlink" title="1. 不使用注解修饰"></a>1. 不使用注解修饰</h2><h3 id="1-1返回ModelAndView"><a href="#1-1返回ModelAndView" class="headerlink" title="1.1返回ModelAndView"></a>1.1返回ModelAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"returnMV"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">returnMV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">List&lt;Item&gt; itemList = itemService.findItemList();</span><br><span class="line">mv.addObject(<span class="string">"itemList"</span>, itemList);</span><br><span class="line">mv.setViewName(<span class="string">"itemList"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-返回void"><a href="#1-2-返回void" class="headerlink" title="1.2 返回void"></a>1.2 返回void</h3><p>   (1) 使用 request 转发向页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"页面路径"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><p>   (2) 通过 response 页面重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"url"</span>)</span><br></pre></td></tr></table></figure><p>   (3) 通过 response 指定响应结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"returnVoid"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"findItem2 result"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-返回字符串"><a href="#1-3-返回字符串" class="headerlink" title="1.3 返回字符串"></a>1.3 返回字符串</h3><p>   (1) 逻辑视图名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"returnString"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">returnString</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">List&lt;Item&gt; itemList = itemService.findItemList();</span><br><span class="line">model.addAttribute(<span class="string">"itemList"</span>, itemList);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemList"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   (2) redirect 重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回字符串:redirect重定向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"redirectUrl"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirectUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"代码执行到这里···redirectUrl"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:redirectUrl"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   (3) forward 转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回字符串:forward重定向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"forwardUrl"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">forwardUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"代码执行到这里···forwardUrl"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:forwardUrl"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用注解"><a href="#2-使用注解" class="headerlink" title="2. 使用注解"></a>2. 使用注解</h2><h3 id="2-1-ResponseBody-注解"><a href="#2-1-ResponseBody-注解" class="headerlink" title="2.1 @ResponseBody 注解"></a>2.1 @ResponseBody 注解</h3><p>@ResponseBody 注解可以通过内置的9种 HttpMessageConverter，匹配不同的 Controller返回值类型，然后进行不同的消息转换处理。</p><p>将转换之后的数据放到 HttpServletResponse 对象的响应体返回到页面,不同的 HttpMessageConverter 处理的数据，指定的 ContentType 值也不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"returnJson"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">returnJson</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">List&lt;Item&gt; itemList = itemService.findItemList();</span><br><span class="line"><span class="keyword">return</span> itemList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-RestController-注解"><a href="#2-2-RestController-注解" class="headerlink" title="2.2 @RestController 注解"></a>2.2 @RestController 注解</h3><p>@RestController 注解相当于是 @Controller 和 @ResponseBody 的组合注解，有此注解标注的类，都不需要再写 @ResponseBody 注解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"itemList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">itemList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Item&gt; itemList = itemService.findItemList();</span><br><span class="line">        <span class="keyword">return</span> itemList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果和使用 @ResponseBody 注解是完全一样的。</p><h2 id="3-RequestMapping-注解"><a href="#3-RequestMapping-注解" class="headerlink" title="3. @RequestMapping 注解"></a>3. @RequestMapping 注解</h2><ol><li>URL路径映射</li></ol><ul><li>@RequestMapping(value=”item”) 或 @RequestMapping(“item”）</li><li>value的值是数组，可以将多个url映射到同一个方法 @RequestMapping(value = {“itemList”, “items”})</li></ul><ol start="2"><li>窄化请求映射</li></ol><p>在 class 上添加 @RequestMapping(url) 指定通用请求前缀， 限制此类下的所有方法的访问请求 url 必须以请求前缀开头，通过此方法对 url 进行模块化分类管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"itemList"</span>,<span class="string">"items"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">itemList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Item&gt; itemList = itemService.findItemList();</span><br><span class="line">        <span class="keyword">return</span> itemList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>请求方法限定</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@RequestMapping</span>(method=&#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br></pre></td></tr></table></figure><h1 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h1><h2 id="1-默认支持的类型"><a href="#1-默认支持的类型" class="headerlink" title="1. 默认支持的类型"></a>1. 默认支持的类型</h2><p>SpringMVC 有支持的默认参数类型，我们直接在形参上给出这些默认类型的声明，就能直接使用了。如下：</p><p><strong>①、HttpServletRequest 对象</strong></p><p><strong>②、HttpServletResponse 对象</strong></p><p><strong>③、HttpSession 对象</strong></p><p><strong>④、Model/ModelMap 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/defaultParameter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">defaultParameter</span><span class="params">(HttpServletRequest request,HttpServletResponse response,HttpSession session,Model model,ModelMap modelMap)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">"requestParameter"</span>, <span class="string">"request类型"</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">"response"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"sessionParameter"</span>, <span class="string">"session类型"</span>);</span><br><span class="line">        <span class="comment">//ModelMap是Model接口的一个实现类，作用是将Model数据填充到request域</span></span><br><span class="line">        <span class="comment">//即使使用Model接口，其内部绑定还是由ModelMap来实现</span></span><br><span class="line">        model.addAttribute(<span class="string">"modelParameter"</span>, <span class="string">"model类型"</span>);</span><br><span class="line">        modelMap.addAttribute(<span class="string">"modelMapParameter"</span>, <span class="string">"modelMap类型"</span>);</span><br><span class="line">         </span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"view/success.jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2. 基本数据类型"></a>2. 基本数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一、byte，占用一个字节，取值范围为 -128-127，默认是“\u0000”，表示空</span><br><span class="line">二、short，占用两个字节，取值范围为 -32768-32767</span><br><span class="line">三、int，占用四个字节，-2147483648-2147483647</span><br><span class="line">四、long，占用八个字节，对 long 型变量赋值时必须加上&quot;L&quot;或“l”,否则不认为是 long 型</span><br><span class="line">五、float，占用四个字节，对 float 型进行赋值的时候必须加上“F”或“f”，如果不加，会产生编译错误，因为系统</span><br><span class="line">自动将其定义为 double 型变量。double转换为float类型数据会损失精度。float a = 12.23产生编译错误的，float a = 12是正确的</span><br><span class="line">六、double，占用八个字节，对 double 型变量赋值的时候最好加上“D”或“d”，但加不加不是硬性规定</span><br><span class="line">七、char,占用两个字节，在定义字符型变量时，要用单引号括起来</span><br><span class="line">八、boolean，只有两个值“true”和“false”，默认值为false，不能用0或非0来代替，这点和C语言不同</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/basicData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicData</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span> <span class="keyword">int</span> username)</span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>问题：我们这里的参数是基本数据类型，如果从前台页面传递的值为 null 或者 “”的话，那么会出现数据转换的异常，就是必须保证表单传递过来的数据不能为null或””，所以，在开发过程中，对可能为空的数据，最好将参数数据类型定义成包装类型</p><h2 id="3-包装数据类型"><a href="#3-包装数据类型" class="headerlink" title="3.包装数据类型"></a>3.包装数据类型</h2><p>包装类型如Integer、Long、Byte、Double、Float、Short，（<strong>String 类型在这也是适用的</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/basicData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicData</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span> Integer username)</span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-POJO（实体类）类型的绑定"><a href="#4-POJO（实体类）类型的绑定" class="headerlink" title="4. POJO（实体类）类型的绑定"></a>4. POJO（实体类）类型的绑定</h2><p>先定义实体类，再进行参数绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pojo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pojo</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-集合类型"><a href="#5-集合类型" class="headerlink" title="5. 集合类型"></a>5. 集合类型</h2><ol><li>数组绑定</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/basicData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicData</span><span class="params">(@RequestParam(value=<span class="string">"ids"</span>)</span> <span class="keyword">int</span>[] ids)</span>&#123;</span><br><span class="line">        System.out.println(ids);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>List与Map绑定</li></ol><p>在包装的pojo中新添加一个List 和 Map类型的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Student&gt; itemInfo;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; itemList;</span><br><span class="line">    <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-三层结构介绍&quot;&gt;&lt;a href=&quot;#1-三层结构介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 三层结构介绍&quot;&gt;&lt;/a&gt;1. 三层结构介绍&lt;/h2&gt;&lt;p&gt;三层架构包括：&lt;strong&gt;表现层、业务层、持久层&lt;/strong&gt;。&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="SpringMVC" scheme="https://bingoch.github.io/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="https://bingoch.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next搭建博客</title>
    <link href="https://bingoch.github.io/2018/10/12/Hexo%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://bingoch.github.io/2018/10/12/Hexo安装与配置/</id>
    <published>2018-10-12T07:17:24.000Z</published>
    <updated>2018-10-12T07:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>所谓“前人栽树，后人乘凉”，本博客的搭建采用了 <strong>Hexo+Next+Github pages</strong> ，在搭建过程中参考了众多大佬撰写的教程，在此非常感谢，下面进入正题。</p><h1 id="Hexo安装与配置"><a href="#Hexo安装与配置" class="headerlink" title="Hexo安装与配置"></a>Hexo安装与配置</h1><p>在配置环境之前，我们需要先了解一下<strong>Hexo</strong> 。</p><h2 id="1-什么是Hexo"><a href="#1-什么是Hexo" class="headerlink" title="1. 什么是Hexo"></a>1. 什么是Hexo</h2><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="2-Hexo的安装"><a href="#2-Hexo的安装" class="headerlink" title="2. Hexo的安装"></a>2. Hexo的安装</h2><p>安装 <strong>Hexo</strong> 之前需要先安装 <strong>Node.js</strong> 和 <strong>Git</strong> ，详细安装方法及更多关于 <strong>Hexo</strong> 内容，详见 <strong>Hexo官方文档</strong> 。如果你的电脑中已经安装好了，下面就开始进行 <strong>Hexo</strong> 的安装吧。<br>在D盘（或其他盘）下新建一个hexo目录，开始进行 <strong>Hexo</strong> 的初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd d:/hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog # 新建一个网站</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g # 或者hexo generate 生成静态文件</span><br><span class="line">$ hexo s # 或者hexo server 启动服务器</span><br></pre></td></tr></table></figure><p>初始化以后的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>_config.yml 站点文件是网站的配置信息，可以在此配置大部分的参数。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>source 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹。Hexo 会根据主题来生成静态页面。</p><p>启动好服务器以后，打开浏览器访问网址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，此时可以看到 <strong>Hexo</strong> 的初始化页面。<br><a href="http://p77e9mol2.bkt.clouddn.com/blog/180416/8hhGf98ig8.png" target="_blank" rel="noopener"><img src="http://p77e9mol2.bkt.clouddn.com/blog/180416/8hhGf98ig8.png" alt="Hexo初始化页面"></a></p><h2 id="3-添加新的选项"><a href="#3-添加新的选项" class="headerlink" title="3. 添加新的选项"></a>3. 添加新的选项</h2><p>这里以”分类“为例，生成“分类”页并添加tpye属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>命令执行完会在\hexo\blog\source\categories 目录下生成一个 index.md 文件，在文件中添加type属性如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>最终效果如图。如需添加其他选项，步骤类似。<a href="http://p77e9mol2.bkt.clouddn.com/blog/180416/HAk09ADD9f.png" target="_blank" rel="noopener"><img src="http://p77e9mol2.bkt.clouddn.com/blog/180416/HAk09ADD9f.png" alt="分类"></a></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>嫌博客页面太丑，不怕，我们可以安装 <strong>Next</strong> 主题来定制个性化博客,在站点目录下（/blog）执行如下命令开始安装主题 <strong>Next</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /blog</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>安装完成以后可以使用如下命令开启服务器本地访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 或者hexo generate 生成静态文件</span><br><span class="line">$ hexo s # 或者hexo server 启动服务器</span><br></pre></td></tr></table></figure><p>关于如何打造更加酷炫的个人博客主页，配置更加个性化的 <strong>Next</strong> 主题，请参考<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a>。</p><h1 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h1><p><strong>Hexo</strong> 安装好以后，可以在本地生成静态页面，接下来就需要将静态页面远程部署到 <strong>gitbub</strong> 上，使用Github Pages 默认提供的域名github.io 或者自定义域名来发布站点。<strong>Github Pages</strong> 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github上。<br>创建Github Pages比较简单，首先需要注册一个github账号，然后再创建一个仓库就行了，仓库名格式必须为：yourusername.github.io，按提示一直下一步即可。关于github的详细配置，可以参考这篇博文<a href="https://www.jianshu.com/p/6ae3697a7c93" target="_blank" rel="noopener">git的使用及github的配置</a>。</p><p><a href="http://p77e9mol2.bkt.clouddn.com/blog/180416/380E3k9HjE.png" target="_blank" rel="noopener"><img src="http://p77e9mol2.bkt.clouddn.com/blog/180416/380E3k9HjE.png" alt="新建一个仓库"></a></p><h1 id="部署博客到GitHub"><a href="#部署博客到GitHub" class="headerlink" title="部署博客到GitHub"></a>部署博客到GitHub</h1><p>首先需要安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接下来创建一个bash脚本deploy.sh进行自动化部署，每次需要更新博客，执行此脚本即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">cp -R public/* .deploy/Bingoch.github.io # 这里填写自己的博客仓库名</span><br><span class="line">cd .deploy/Bingoch.github.io</span><br><span class="line">git add .</span><br><span class="line">git commit -m “update”</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h1 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h1><p>博文撰写需要使用 <strong>Markdown</strong> 语法，<strong>Markdown</strong> 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档。这里推荐一款 <strong>Markdown</strong> 编辑器 <strong>Cmd Markdown</strong>，界面非常简洁，可以极大地提高写作效率。<br>以本文为例，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于本博客的搭建</span><br><span class="line">tag: Hexo</span><br><span class="line">categories: Hexo</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">所谓“前人栽树，后人乘凉”，本博客的搭建采用了 **Hexo+Next+Github pages** ，在搭建过程中参考了众多大佬撰写的教程，在此非常感谢，下面进入正题。</span><br><span class="line"># 环境配置</span><br><span class="line">在配置环境之前，我们需要先了解一下**Hexo** 。</span><br><span class="line">## 1. 什么是Hexo</span><br><span class="line">**Hexo** 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一篇博文写完之后，保存文件到\hexo\blog\source_posts目录下。接下来生成静态页面，开启服务器本地访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看页面。如果页面达到预想效果，就可以执行写好的 <em>deploy</em> 脚本将博文部署到github上，此时访问个人博客主页可以看到刚刚发表的文章。</p><p><em>本文至此结束，欢迎评论。再次感谢各位大佬的教程分享。</em></p><blockquote><p>博客搭建过程，更新于2018-4-16 23:04</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所谓“前人栽树，后人乘凉”，本博客的搭建采用了 &lt;strong&gt;Hexo+Next+Github pages&lt;/strong&gt; ，在搭建过程中参考了众多大佬撰写的教程，在此非常感谢，下面进入正题。&lt;/p&gt;
&lt;h1 id=&quot;Hexo安装与配置&quot;&gt;&lt;a href=&quot;#Hexo安
      
    
    </summary>
    
      <category term="Hexo" scheme="https://bingoch.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://bingoch.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
